/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.events;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ReviewCreated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5008099652049180036L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ReviewCreated\",\"namespace\":\"avro.events\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"reviewer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"pullRequestNumber\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private long id;
   private java.lang.String reviewer;
   private long pullRequestNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ReviewCreated() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param reviewer The new value for reviewer
   * @param pullRequestNumber The new value for pullRequestNumber
   */
  public ReviewCreated(java.lang.Long id, java.lang.String reviewer, java.lang.Long pullRequestNumber) {
    this.id = id;
    this.reviewer = reviewer;
    this.pullRequestNumber = pullRequestNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return reviewer;
    case 2: return pullRequestNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: reviewer = (java.lang.String)value$; break;
    case 2: pullRequestNumber = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'reviewer' field.
   * @return The value of the 'reviewer' field.
   */
  public java.lang.String getReviewer() {
    return reviewer;
  }

  /**
   * Sets the value of the 'reviewer' field.
   * @param value the value to set.
   */
  public void setReviewer(java.lang.String value) {
    this.reviewer = value;
  }

  /**
   * Gets the value of the 'pullRequestNumber' field.
   * @return The value of the 'pullRequestNumber' field.
   */
  public java.lang.Long getPullRequestNumber() {
    return pullRequestNumber;
  }

  /**
   * Sets the value of the 'pullRequestNumber' field.
   * @param value the value to set.
   */
  public void setPullRequestNumber(java.lang.Long value) {
    this.pullRequestNumber = value;
  }

  /**
   * Creates a new ReviewCreated RecordBuilder.
   * @return A new ReviewCreated RecordBuilder
   */
  public static avro.events.ReviewCreated.Builder newBuilder() {
    return new avro.events.ReviewCreated.Builder();
  }

  /**
   * Creates a new ReviewCreated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ReviewCreated RecordBuilder
   */
  public static avro.events.ReviewCreated.Builder newBuilder(avro.events.ReviewCreated.Builder other) {
    return new avro.events.ReviewCreated.Builder(other);
  }

  /**
   * Creates a new ReviewCreated RecordBuilder by copying an existing ReviewCreated instance.
   * @param other The existing instance to copy.
   * @return A new ReviewCreated RecordBuilder
   */
  public static avro.events.ReviewCreated.Builder newBuilder(avro.events.ReviewCreated other) {
    return new avro.events.ReviewCreated.Builder(other);
  }

  /**
   * RecordBuilder for ReviewCreated instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ReviewCreated>
    implements org.apache.avro.data.RecordBuilder<ReviewCreated> {

    private long id;
    private java.lang.String reviewer;
    private long pullRequestNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.events.ReviewCreated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reviewer)) {
        this.reviewer = data().deepCopy(fields()[1].schema(), other.reviewer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pullRequestNumber)) {
        this.pullRequestNumber = data().deepCopy(fields()[2].schema(), other.pullRequestNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ReviewCreated instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.events.ReviewCreated other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reviewer)) {
        this.reviewer = data().deepCopy(fields()[1].schema(), other.reviewer);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pullRequestNumber)) {
        this.pullRequestNumber = data().deepCopy(fields()[2].schema(), other.pullRequestNumber);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public avro.events.ReviewCreated.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public avro.events.ReviewCreated.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'reviewer' field.
      * @return The value.
      */
    public java.lang.String getReviewer() {
      return reviewer;
    }

    /**
      * Sets the value of the 'reviewer' field.
      * @param value The value of 'reviewer'.
      * @return This builder.
      */
    public avro.events.ReviewCreated.Builder setReviewer(java.lang.String value) {
      validate(fields()[1], value);
      this.reviewer = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'reviewer' field has been set.
      * @return True if the 'reviewer' field has been set, false otherwise.
      */
    public boolean hasReviewer() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'reviewer' field.
      * @return This builder.
      */
    public avro.events.ReviewCreated.Builder clearReviewer() {
      reviewer = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'pullRequestNumber' field.
      * @return The value.
      */
    public java.lang.Long getPullRequestNumber() {
      return pullRequestNumber;
    }

    /**
      * Sets the value of the 'pullRequestNumber' field.
      * @param value The value of 'pullRequestNumber'.
      * @return This builder.
      */
    public avro.events.ReviewCreated.Builder setPullRequestNumber(long value) {
      validate(fields()[2], value);
      this.pullRequestNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'pullRequestNumber' field has been set.
      * @return True if the 'pullRequestNumber' field has been set, false otherwise.
      */
    public boolean hasPullRequestNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'pullRequestNumber' field.
      * @return This builder.
      */
    public avro.events.ReviewCreated.Builder clearPullRequestNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ReviewCreated build() {
      try {
        ReviewCreated record = new ReviewCreated();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.reviewer = fieldSetFlags()[1] ? this.reviewer : (java.lang.String) defaultValue(fields()[1]);
        record.pullRequestNumber = fieldSetFlags()[2] ? this.pullRequestNumber : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
